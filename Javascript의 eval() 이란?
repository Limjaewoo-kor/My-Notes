https://lcoding.tistory.com/manage/newpost/?type=post&returnURL=%2Fmanage%2Fposts%2F
위 링크에서 이미지를 이용하여 더 보기 쉽게 내용 확인이 가능합니다.

안녕하세요, 오늘은 자바스크립트의 eval함수에 대하여 알아보겠습니다.



자바스크립트의 eval() 함수는 문자열을 자바스크립트 코드로 해석하고 실행하는 기능을 제공합니다.

이 함수는 강력한 기능을 가지고 있지만, 신중하게 사용해야 합니다,

왜냐하면 보안상의 이유로 사용을 권장하지 않는 경우도 많기 때문인데요.

우선 사용법부터 천천히 알아보겠습니다.



1. eval() 사용법


// 예시 1: 기본적인 사용
var x = 10;
var y = 20;
var code = 'x + y'; // 문자열로 표현된 자바스크립트 코드

var result = eval(code); // eval 함수를 사용하여 문자열을 실행하고 결과를 반환

console.log(result); // 결과: 30

// 예시 2: 동적으로 생성된 코드 실행
function evaluateExpression(expression) {
    return eval(expression);
}

var expressionResult = evaluateExpression('3 * 5'); // 함수를 통해 문자열을 실행하고 결과를 반환

console.log(expressionResult); // 결과: 15

// 예시 3: 심화

var arr = ["ab","cd","df"];

for (let i = 0; i < arr.length; i++) {
    eval('this.document.querySelector("#firstFrame")'+arr[i]+'.onclick()');
}
//위와 같이 특정 배열에 값을 담고 반복문을 이용하여 배열에 든 값을 빼내면서 특정 메서드를 실행할 수도 있습니다.



위와 같이 다양하게 eval() 함수를 사용할 수 있습니다.

eval() 함수는 문자열을 코드로 실행하기 때문에 사용자 입력을 처리하거나 외부 소스에서 가져온 코드를 실행할 때 주의해야 합니다.





2. eval() 보안상의 문제



1) Injection Attacks -

eval() 함수는 문자열을 자바스크립트 코드로 해석하고 실행합니다.

사용자로부터의 입력값이나 외부에서 가져온 데이터가 코드 문자열에 포함될 경우, 악의적인 사용자가 코드를 주입할 수 있습니다.  이는 주로 SQL Injection과 같은 공격에서 사용되지만, 자바스크립트에서도 유사한 문제가 발생할 수 있습니다.



2) 실행 속도 저하 -

eval() 함수를 호출할 때마다 자바스크립트 엔진은 코드 문자열을 분석하고 실행해야 합니다.

이는 불필요한 오버헤드를 발생시킬 수 있으며, 성능 저하로 이어질 수 있습니다.



3) 디버깅 어려움 -

eval() 함수를 사용하여 실행된 코드는 정적인 코드보다 디버깅하기가 훨씬 어렵습니다.

코드가 동적으로 생성되고 실행되므로, 오류를 찾고 수정하는 것이 복잡해질 수 있습니다.



4) CSP (Content Security Policy) -  

CSP를 사용하는 경우, eval() 함수를 사용하는 것이 허용되지 않을 수 있습니다.

CSP는 애플리케이션의 보안을 강화하기 위한 정책이며, 동적으로 코드를 실행하는 것을 금지할 수 있습니다.



5) 악의적인 코드 실행 가능성 -  

사용자로부터 입력받은 코드를 실행하는 경우, 해당 코드가 악의적인 목적으로 작성되었을 수 있습니다. 이로 인해 개인정보 유출, 시스템 손상, 또는 다른 보안 문제가 발생할 수 있습니다.







따라서 eval() 함수를 사용할 때는 꼭 필요한 경우에만 사용하고, 신뢰할 수 있는 소스에서 오는 데이터만을 실행하는 등의 주의가 필요합니다.



악의적인 사용자가 입력한 코드가 실행될 수 있기 때문에 보안 취약점이 발생할 수 있기때문에 보안 상의 이유로 eval() 함수를 사용하는 것은 피하는 것이 좋으며, eval() 함수를 대체할 수 있는 다른 방법을 고려하는 것이 좋습니다.



예를 들어, JSON.parse()를 사용하여 JSON 문자열을 객체로 변환하는 등의 방법을 고려할 수 있습니다.



감사합니다.

