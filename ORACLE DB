

JOIN할때 ON과 WHERE 중 어디에 조건을 줘야 효과적일까?

ANSI 표준에 따른 코딩에서는 조인 조건을 ON절에 달아주고, WHERE절에는 검색조건을 달게 됩니다. 
ON에 검색조건을 달아도 쿼리 실행에는 상관없으나,
ON절에 조건을 주면, 테이블을 합칠 때 조건이 걸려서 하나의 가상테이블이 만들어집니다. 
그와 반대로 WHERE절에 조건이 걸리면, 다 만들어진 테이블을 다시 훑으면서 해당 조건에 맞는 결과물을 반환하는 게 됩니다. 
ON절에 거는게 더욱 효과적이라고 볼 수 있다.


Oracle DB에서 BOOLEAN을 표현하려면??
오라클에는 Boolean 자료형이 따로 존재하지않기때문에,
True,False는 "1","0"을 이용하여 CHAR(1)타입으로 저장한다.


Commit, Rollback, Savepoint

Commit - 현재 상태로 저장(되돌릴수없음).

Rollback - Delete나 Update후 Commit을 안했다면 되돌릴수있음. 가장 최근 Commit 및 Savepoint로 돌아감.

Savepoint - Rollback 할 수 있도록 위치를 정해놓음.


------------------------------------------------Commit 후 이전 데이터 확인 하는법. --------------------------------------------

오라클은 UNDO tablespace를 가지고 있는데, Commit이 된 후 부터 일정 시간동안 임시로 테이블을 저장하고 있다. 얼마나 오래 유지 할 것인가는 Undo Table속성에서 정할 수 있다. 

만약 커밋 후 15분 전 데이터를 보고 싶다면 아래와 sql쿼리를 날려본다. 
select *
  from 테이블명 as of timestamp(systimestamp-interval '15' minute);

이것을 시간 단위, day 단위로 할 수 있다. 

select * 
  from 테이블명 as of timestamp(systimestamp-interval '1' hour);
- 1시간 전
select * 
  from 테이블명 as of timestamp(systimestamp-interval '2' day);
- 이틀 전

----------------------------------------------------조회 및 살리기 쿼리----------------------------------------------------

-- 실수로 지운 데이터 조회하기 (10분전 데이터 조회)

SELECT * FROM employees

 AS OF TIMESTAMP ( SYSTIMESTAMP - INTERVAL '10' MINUTE)

WHERE no = '7'

 

-- 실수로 지운데이터 살리기

INSERT INTO employees

SELECT * FROM employees

 AS OF TIMESTAMP ( SYSTIMESTAMP - INTERVAL '10' MINUTE)

WHERE no = '7'


----------------------------------------------------CLOB데이터 글자 수 조회하기----------------------------------------------------

오라클에서 CLOB에 length등의 함수를 쓰면 에러가 발생한다. 
CLOB형태의 컬럼 데이터를 길이를 구하고, 문자열을 자르려면, DBMS_LOB.GETLENGTH, DBMS_LOB.SUBSTR을 사용하면 된다.
아래처럼 사용하면 된다. 컬럼은 CLOB형이어야한다.

SELECT DBMS_LOB.SUBSTR(CLOB형 컬럼명, 자를 문자열 길이, OFFSET) AS "CLOB_SUBSTR" -- 문자열 자르기
       DBMS_LOB.GETLENGTH(CLOB형 컬럼명)  AS "CLOB_LENGTH" , -- 문자열 
 FROM 테이블이름
     

---------------------------------------------------- SUBQUERY 종류 ----------------------------------------------------

스칼라 서브 쿼리	 SELECT 절	 	단일 칼럼, 단일 행을 반환 (1개의 값)

 인라인 뷰	 FROM 절	 	View와 사용적인 측면에서 동일함 (임시 뷰, 임시 테이블)

 중첩 서브 쿼리	 WHERE 절, HAVING 절	다중 칼럼 또는 다중 행을 반환

----------------------------------------------------  ----------------------------------------------------

CONNECT BY - 계층형으로 나누기 위해 사용하는 쿼리
EX )
SELECT EMPNO, ENAME, MGR FROM EMP
START WITH MGR IS NULL
CONNECT BY PRIOR EMPNO='MGR'


PARTITION BY - 집계함수에 그룹바이와 비슷하게 붂는 역할로 사용이 가능하다.
EX )
SELECT empno, ename, job, sal
     , SUM(sal) OVER(PARTITION BY job)
  FROM emp
 WHERE job IN ('MANAGER', 'SALESMAN')
 ORDER BY job


GROUP BY - 그룹바이절로 그룹을 지을 수 있으며, ROLLUP, CUBE, GROUPPING SETS를 사용할 수 있다.
EX )

1) ROLLUP - 사용시 인자로 넣은 값을 기준으로 소계,총계가 함께 조회된다.
EX )
SELECT 상품ID, 월, SUM(매출액) AS 매출액
FROM 월별매출
GROUP BY ROLLUP(상품ID, 월);

	ROLLUP함수를 쓰면
	첫번째 인자(상품 ID)별 두번째 인자(월) + 첫번째 인자(상품 ID)별 두번째 인자(월)의 소계(SUBTOTAL) + 총계(GRAND TOTAL) 의 결과가 나온다.
	따라서 ROLLUP함수는 인수의 순서에도 영향을 받게 된다.

EX )
SELECT 월, 상품ID, SUM(매출액) AS 매출액
FROM 월별매출
GROUP BY ROLLUP(월, 상품ID);

	아까와는 반대로
	첫번째 인자(월)별 두번째 인자(상품 ID) + 첫번째 인자(월)별 두번째 인자(상품ID)의 소계(SUBTOTAL) + 총계(GRAND TOTAL) 의 결과가 나온다.


2) CUBE - 
EX )
SELECT 상품ID, 월, SUM(매출액) AS 매출액
FROM 월별매출
GROUP BY CUBE(상품ID, 월);

	ROLLUP과 같이 소계와 총계가 조회되나, 모든 경우의 수에 대하여 조회된다. 따라서 인자값이 달라도 영향이없다.


3) GROUPING SETS  -
EX )
SELECT 상품ID, 월, SUM(매출액) AS 매출액
FROM 월별매출
GROUP BY GROUPING SETS(상품ID, 월);

	첫번째 인자(상품ID)별 소계(SUBTOTAL), 두번째 인자(월)별 소계(SUBTOTAL)이 나오는 것을 확인할 수 있다.
	ROLLUP과 CUBE와 달리 계층 구조가 나타나지 않으며 따라서 인자의 순서가 달라도 결과는 똑같다.
	또한, GROUPING SETS 함수는 괄호로 묶은 집합별로도 집계를 구할 수 있다.
EX )
SELECT 상품ID, 월, 회사, SUM(매출액) AS 매출액
FROM 월별매출
GROUP BY GROUPING SETS((상품ID, 월), 회사);
	
	묶여진 컬럼을 하나의 인자로 취급해 (상품ID, 월)별 소계(SUBTOTAL)과 회사별 소계(SUBTOTAL)이 나오는 걸 확인할 수 있다.
